# AI Todo + Diary Tool: Technical Implementation Guide

## Overview

This document serves as a complete technical guide for developing an AI-based Todo + Diary application for beginners. The goal is to provide minute-level clarity on how each part of the application will be implemented from scratch, including backend, frontend, AI integration, and deployment.

---

## 1. Project Initialization

### 1.1 Folder Structure

```
project-root/
|-- backend/
|-- frontend/
|-- docs/
|-- requirements.txt
|-- README.md
```

### 1.2 Setup Instructions

* Install Python 3.10+, Node.js 18+, and PostgreSQL.
* Create a virtual environment using `python -m venv venv`.
* Install Django and DRF: `pip install django djangorestframework`
* Initialize React frontend: `npx create-react-app frontend`

---

## 2. Backend Implementation (Django)

### 2.1 Create Django App

```bash
cd backend
django-admin startproject core
cd core
python manage.py startapp todo
```

### 2.2 Models

* **User** (custom user model)
* **Task** (title, description, priority, deadline, estimated time, status)
* **DiaryEntry** (text, mood, learning tags, sentiment score)
* **PerspectiveMemory** (stored user decisions/goals)

### 2.3 Serializers

Create serializers for each model in `serializers.py` using DRF:

```python
from rest_framework import serializers
from .models import Task, DiaryEntry

class TaskSerializer(serializers.ModelSerializer):
    class Meta:
        model = Task
        fields = '__all__'
```

### 2.4 Views (Class-based Views)

* Task CRUD
* Diary Entry CRUD
* Perspective Tracker

### 2.5 Authentication

* Use Djoser + SimpleJWT
* Secure endpoints using permissions

### 2.6 Reminder System

* Use Celery to run background reminders every hour.
* Redis as the broker.

---

## 3. AI Integration

### 3.1 Diary Summary + Reflection

* Use OpenAI GPT-4 API
* Send diary text + perspective history, ask: "What did user learn and what to remind?"

### 3.2 Estimated Time Analyzer

* On task creation, call AI to validate user time expectations.
* Prompt: "User says task X will take Y hours. Does that match general expectation?"

### 3.3 Motivational Reminders

* Store key goals.
* Remind with: "You said on \[date] that \[goal]. Youâ€™re halfway, keep going!"

### 3.4 AI Prompt Engineering

Maintain a `prompts.py` file:

```python
DAILY_REFLECTION_PROMPT = """
Analyze this diary entry and return a summary, lessons, and 2 action suggestions.
"""
```

---

## 4. Frontend (React + TailwindCSS)

### 4.1 Pages

* Login / Signup
* Dashboard (Tasks + Diary Summary)
* Task Manager (CRUD UI)
* Diary Writer (Text + Voice)
* Perspective Timeline

### 4.2 State Management

* Use `React Context` or `Redux Toolkit`
* Manage user, auth, tasks, diary, insights

### 4.3 API Integration

* Axios setup in `api.js`
* Add auth token headers

```js
axios.interceptors.request.use(config => {
  const token = localStorage.getItem('token');
  if (token) config.headers.Authorization = `Bearer ${token}`;
  return config;
});
```

### 4.4 Voice Input

* Use Web Speech API for capturing user input

```js
const recognition = new window.SpeechRecognition();
recognition.onresult = event => setDiary(event.results[0][0].transcript);
```

---

## 5. Infrastructure

### 5.1 Local Dev Setup

* Use `docker-compose` for PostgreSQL + Redis

```yaml
services:
  db:
    image: postgres
  redis:
    image: redis
```

### 5.2 Production Hosting (MVP)

* Render or Railway (easy deploy)
* Use their PostgreSQL + Redis plans

---

## 6. Monitoring & Reliability

### 6.1 Logging

* Python `logging` module
* React `ErrorBoundary`

### 6.2 Alerts

* Sentry for FE/BE error tracking
* Email for Celery failures

### 6.3 Backups

* PostgreSQL daily backup (Railway handles this)

---

## 7. Development Roadmap

### Phase 1: Core Feature Build (10 days)

* [x] Task CRUD
* [x] Diary CRUD
* [x] Auth
* [x] Basic AI summary

### Phase 2: AI Memory + Timeline (10 days)

* [x] Perspective Memory Store
* [x] AI Prompt Tracker
* [x] Learning Reminders

### Phase 3: Voice & UX Polish (7 days)

* [x] Voice Notes
* [x] Dashboard polish
* [x] Loading state, modals

### Phase 4: QA & Testing (5 days)

* [x] Write unit tests (pytest, jest)
* [x] Run integration tests
* [x] Fix SLO breaches

---

## 8. Testing Guide

### Backend:

* Use `pytest-django`
* Mock OpenAI API calls using `unittest.mock`

### Frontend:

* `jest` + `react-testing-library`
* Mock Axios with `axios-mock-adapter`

---

## 9. Deployment Checklist

* [ ] `.env` secrets configured
* [ ] GitHub Actions CI/CD
* [ ] Migrations run
* [ ] Domain + HTTPS

---

## 10. Post-Launch

* Monitor API usage
* Set OpenAI token cost limits
* Add feedback form (Google Form or DB driven)

---

Prepared for: **Solo Developer Building AI Todo+Diary Tool**
Maintained by: **ChatGPT (Tech Lead Guide)**
Date: **10 May 2025**
